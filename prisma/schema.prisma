// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum Role {
  ADMIN
  USER
}

enum Status {
  INVITED
  DECLINED
  ACCEPTED
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  hashedPassword      String?
  accessToken         String?
  refreshToken        String?       @db.Text
  refreshTokenExpire  DateTime?
  firstName           String?
  lastName            String?
  avatar              String?       @db.Text
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  role                Role          @default(ADMIN)
  status              UserStatus[]
  wishList            WishList[]
  thankYou            ThankYou[]    @relation(name: "ThankYou_User")
  thankYouToUser      ThankYou[]    @relation(name: "ThankYou_ToUser")
  santa               Pairings[]    @relation(name: "Pairings_Santa")
  person              Pairings[]    @relation(name: "Pairings_Person")
  createdEvents       Event[]       @relation("UserEvents")
}

model Event {
  id                  String        @id @default(uuid())
  name                String
  date                DateTime  
  createdAt           DateTime      @default(now())
  updatedAt           DateTime
  sendReminder        Boolean       @default(false)
  userStatus          UserStatus[]
  pairings            Pairings[]
  wishList            WishList[]
  thankYou            ThankYou[]
  creator             User          @relation("UserEvents", fields: [creatorId], references: [id])
  creatorId           Int
}

model UserStatus {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId           String
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status            Status
}

model Pairings {
  id                Int           @id @default(autoincrement())
  eventId           String
  event             Event         @relation(fields: [eventId], references: [id])
  santaId           Int
  santa             User          @relation(fields: [santaId], references: [id], name: "Pairings_Santa")
  personId          Int
  person            User          @relation(fields: [personId], references: [id], name: "Pairings_Person")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model WishList {
  id                Int           @id @default(autoincrement())
  name              String
  url               String        @db.Text
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  order             Int?
  eventId           String
  event             Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  siteImage         String?
  siteTitle         String?
  siteDescription   String?       @db.Text
}

model ThankYou {
  id                Int           @id @default(autoincrement())
  eventId           String
  event             Event         @relation(fields: [eventId], references: [id])
  userId            Int           
  user              User          @relation(fields: [userId], references: [id], name: "ThankYou_User")
  toUserId          Int
  toUser            User          @relation(fields: [toUserId], references: [id], name: "ThankYou_ToUser")
  message           String
  createdAt         DateTime      @default(now())
}
